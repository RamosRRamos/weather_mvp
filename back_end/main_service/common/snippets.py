import requests
from decouple import config

def genre_to_playlist(temperature):
    """
    Determines the music genre based on the temperature.

    Args:
        temperature (float): The current temperature in Celsius.

    Returns:
        str: The genre of music that corresponds to the given temperature:
             - "pop" for temperatures above 25째C
             - "rock" for temperatures between 10째C and 25째C
             - "classical" for temperatures below 10째C
    """
    if temperature > 25:
        return "pop"
    elif temperature >= 10:
        return "rock"
    else:
        return "classical"

def get_weather(city, request_code):
    """
    Retrieves the current weather information for a specific city.

    Args:
        city (str): The name of the city for which the weather is requested.
        request_code (str): A unique code associated with the request.

    Returns:
        Response: The HTTP response object returned by the weather service API.
    """
    base_url = config("WEATHER_SERVICE_URL")
    params = {
        "city": city,
        "request_code": request_code,
    }
    response = requests.get(base_url, params=params, timeout=30)
    return response

def get_playlist(temperature, request_code):
    """
    Retrieves a playlist based on the current temperature.

    Args:
        temperature (float): The current temperature in Celsius.
        request_code (str): A unique code associated with the request.

    Returns:
        Response: The HTTP response object returned by the playlist service API.
    """
    genre = genre_to_playlist(temperature)
    base_url = config("PLAYLIST_SERVICE_URL")
    params = {
        "genre": genre,
        "amount": 10,
        "request_code": request_code,
    }
    response = requests.get(base_url, params=params, timeout=30)
    return response

def float_temperature(json_response):
    """
    Extracts and converts the temperature from the weather service response to a float.

    Args:
        json_response (dict): The JSON response from the weather service API.

    Returns:
        float: The current temperature in Celsius.
    """
    return float(json_response["current"]["temp_c"])

def playlist_data(json_response):
    """
    Extracts the playlist data from the playlist service response.

    Args:
        json_response (dict): The JSON response from the playlist service API.

    Returns:
        dict: The playlist data generated by the GPT model.
    """
    return json_response["response_gpt"]
