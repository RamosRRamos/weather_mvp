services:
  db:
    image: "postgres:alpine"
    environment:
      - POSTGRES_USER=mini_blog
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mini_blog
    ports:
      - "5432:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data:delegated

  broker:
    image: "rabbitmq:alpine"
    ports:
      - "5672:5672"  # RabbitMQ's standard port for communicating with Celery

  result:
    image: "redis:alpine"
    ports:
      - "6379:6379"  # Redis default port

  weatherservice:
    build:
      dockerfile: Dockerfile
      context: ./back_end/weather_api_service
    ports:
      - "8801:8000"  # Check that the service actually uses port 8000 in the container
    volumes:
      - ./back_end/weather_api_service:/home/user/app/
    env_file: ./back_end/weather_api_service/.env
    depends_on:
      - db
      - broker
      - result

  weatherservice_celery:
    build:
      dockerfile: Dockerfile
      context: ./back_end/weather_api_service
    command: celery --app=weather_api_service worker --loglevel=info
    volumes:
      - ./back_end/weather_api_service:/home/user/app/
    env_file: ./back_end/weather_api_service/.env
    depends_on:
      - db
      - broker
      - result

  openiaservice:
    build:
      dockerfile: Dockerfile
      context: ./back_end/openai_service
    ports:
      - "8802:8000"  # Check that the service actually uses port 8000 in the container
    volumes:
      - ./back_end/openai_service:/home/user/app/
    env_file: ./back_end/openai_service/.env
    depends_on:
      - db
      - broker
      - result

  openiaservice_celery:
    build:
      dockerfile: Dockerfile
      context: ./back_end/openai_service
    command: celery --app=openai_service worker --loglevel=info
    volumes:
      - ./back_end/openai_service:/home/user/app/
    env_file: ./back_end/openai_service/.env
    depends_on:
      - db
      - broker
      - result

  mainservice:
    build:
      dockerfile: Dockerfile
      context: ./back_end/main_service
    ports:
      - "8803:8000"  # Check that the service actually uses port 8000 in the container
    volumes:
      - ./back_end/main_service:/home/user/app/
    env_file: ./back_end/main_service/.env
    depends_on:
      - db
      - broker
      - result

  mainservice_celery:
    build:
      dockerfile: Dockerfile
      context: ./back_end/main_service
    command: celery --app=main_service worker --loglevel=info
    volumes:
      - ./back_end/main_service:/home/user/app/
    env_file: ./back_end/main_service/.env
    depends_on:
      - db
      - broker
      - result

volumes:
  dbdata:
    name: weather_mvp_dbdata
